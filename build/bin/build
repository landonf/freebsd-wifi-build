#!/bin/sh

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="$(dirname `realpath $0`)"
CUR_DIR="`pwd`"

# Check dependencies are met.
${SCRIPT_DIR}/check_deps || exit 1

CFGNAME=$1
shift

USER_SETTINGS=${USER_SETTINGS:-${HOME}/.freebsd-wifi-build-settings.cfg}

# Bring in the config file
. ${SCRIPT_DIR}/../cfg/${CFGNAME} || exit 1

# If X_BUILD_BASE_CFG is set, also load that in.
if [ -n "${X_BUILD_BASE_CFG}" ]; then
	. ${SCRIPT_DIR}/../cfg/base/${X_BUILD_BASE_CFG} || exit 1
fi

test -e ${USER_SETTINGS} && . ${USER_SETTINGS}
export USER_SETTINGS

# Get the username - you don't need to run any of this as root
# (but since I like the freebsd releng people and I'd rather not
# cause a stroke, make it easy to override.)

USER_ID="`id -u`"
if [ "${USER_ID}" -eq "0" ]; then
	echo "*** NOTE: running as root - you don't have to do this!"
	echo "*** These build scripts will function correctly as non-root!"
	if [ "${BUILD_AS_ROOT}" != "YES" ]; then
		echo "*** To run as root, set BUILD_AS_ROOT=YES when building"
		exit 1
	fi
fi

echo "*** Configuration file	: $CFGNAME"
echo "*** Base configuration	: ${X_BUILD_BASE_CFG}"
echo "*** Platform		: $BUILDNAME"

# include the config variable generation code
. ${SCRIPT_DIR}/../lib/cfg.sh || exit 1

# Defaults:
# if $1 is empty, then try the BUILD_THINGS and BUILD_IMG target list.
# If it's buildimg, then BUILDIMG target list.
# If it's cleanimg, then CLEANIMG target list.
# If it's cleanall, then CLEANALL target list.
if [ -z "$1" ]; then
	X_BUILD_LIST="${X_BUILD_BUILD_THINGS_DEFAULTS} ${X_BUILD_BUILD_IMG_DEFAULTS}"
elif [ "$1" = "buildimg" ]; then
	X_BUILD_LIST=${X_BUILD_BUILD_IMG_DEFAULTS}
elif [ "$1" = "cleanimg" ]; then
	X_BUILD_LIST=${X_BUILD_CLEANIMG_DEFAULTS}
elif [ "$1" = "cleanall" ]; then
	X_BUILD_LIST=${X_BUILD_CLEANALL_DEFAULTS}
else
	X_BUILD_LIST=$*
fi

echo "Build list: ${X_BUILD_LIST}"

for BUILD_TARGET in ${X_BUILD_LIST}; do
	echo "*** Target		: ${BUILD_TARGET}"

	case $BUILD_TARGET in
		'buildworld' | 'buildkernel' | 'installworld' | \
		    'installkernel' | 'distribution' | 'buildenv' | \
		    'toolchain' | 'kernel-toolchain' | 'xdev' | 'buildenvvars' )
			${SCRIPT_DIR}/build_freebsd ${CFGNAME} $BUILD_TARGET || exit 1
		;;
		'cleanroot')
			${SCRIPT_DIR}/build_cleanroot ${CFGNAME} $BUILD_TARGET || exit 1
		;;
		'cleanobj')
			${SCRIPT_DIR}/build_cleanobj ${CFGNAME} $BUILD_TARGET || exit 1
		;;
		'ubnt')
			${SCRIPT_DIR}/build_ubnt ${CFGNAME} || exit 1
		;;
		'tplink')
			${SCRIPT_DIR}/build_tplink ${CFGNAME} || exit 1
		;;
		'dlink')
			${SCRIPT_DIR}/build_dlink ${CFGNAME} || exit 1
		;;
		'airstation')
			${SCRIPT_DIR}/build_airstation ${CFGNAME} || exit 1
		;;
		'uboot')
			${SCRIPT_DIR}/build_uboot ${CFGNAME} || exit 1
		;;
		'ralink')
			${SCRIPT_DIR}/build_ralink ${CFGNAME} || exit 1
		;;
		'trx')
			${SCRIPT_DIR}/build_trx ${CFGNAME} || exit 1
		;;
		'fsimage')
			${SCRIPT_DIR}/build_fsimage ${CFGNAME} || exit 1
		;;
		'fullfsimage')
			${SCRIPT_DIR}/build_fullfsimage ${CFGNAME} || exit 1
		;;
		'tinymfsroot')
			${SCRIPT_DIR}/build_tinymfsroot ${CFGNAME} || exit 1
		;;
		'mfsroot')
			${SCRIPT_DIR}/build_mfsroot ${CFGNAME} || exit 1
		;;
		'fullroot')
			${SCRIPT_DIR}/build_fullroot ${CFGNAME} || exit 1
		;;
		'netboot')
			${SCRIPT_DIR}/build_netboot ${CFGNAME} || exit 1
		;;
		'fetchpkgs')
			${SCRIPT_DIR}/build_fetchpkgs ${CFGNAME} || exit 1
		;;
		'makepkgs')
			${SCRIPT_DIR}/build_makepkgs ${CFGNAME} || exit 1
		;;
		'addpkgs')
			${SCRIPT_DIR}/build_addpkgs ${CFGNAME} || exit 1
		;;
		*)
			echo "*** ERROR: Unknown target: $BUILD_TARGET"
		;;
	esac



	echo "*** Target Done."
done

echo "*** Build Completed."
